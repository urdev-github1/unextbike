Verzeichnisstruktur des lib-Ordners:

└── models/
    └── bike_location.dart
└── screens/
    └── main_screen.dart
└── services/
    └── nextbike_api_service.dart
└── widgets/
    ├── bike_map.dart
    └── custom_marker_icon.dart
└── main.dart


================================================================================

Dateiinhalte:

// ==== lib\models\bike_location.dart ====

 1: // lib/models/bike_location.dart
 2: 
 3: import 'package:latlong2/latlong.dart';
 4: 
 5: /// Repräsentiert den Standort eines Fahrrads mit seiner ID, Breiten- und Längengrad.
 6: class BikeLocation {
 7:   final String bikeNumber;
 8:   final LatLng position;
 9: 
10:   BikeLocation({required this.bikeNumber, required this.position});
11: 
12:   @override
13:   String toString() {
14:     return 'BikeLocation(bikeNumber: $bikeNumber, position: ${position.latitude}, ${position.longitude})';
15:   }
16: }
17: 

// ==== lib\screens\main_screen.dart ====

  1: // lib/screens/main_screen.dart
  2: import 'package:flutter/material.dart';
  3: import 'package:latlong2/latlong.dart'; // Für LatLng-Objekte
  4: import 'package:flutter_map/flutter_map.dart'; // Für OpenStreetMap-Anzeige und Marker
  5: 
  6: import '../services/nextbike_api_service.dart'; // Unser API-Service
  7: import '../models/bike_location.dart'; // Unser Datenmodell für BikeLocation
  8: 
  9: class MainScreen extends StatefulWidget {
 10:   const MainScreen({super.key});
 11: 
 12:   @override
 13:   State<MainScreen> createState() => _MainScreenState();
 14: }
 15: 
 16: class _MainScreenState extends State<MainScreen> {
 17:   final TextEditingController _bikeIdController = TextEditingController();
 18:   final MapController _mapController =
 19:       MapController(); // Controller für die FlutterMap
 20: 
 21:   String _currentSearchBikeId =
 22:       ''; // Die ID, die aktuell gesucht oder gefunden wurde
 23:   bool _isLoading = false; // Zeigt an, ob Daten geladen werden
 24:   String? _errorMessage; // Speichert Fehlermeldungen für die Anzeige
 25: 
 26:   // Speichert alle von der API geladenen Fahrradstandorte
 27:   // Schlüssel: Fahrrad-ID (String), Wert: BikeLocation-Objekt
 28:   Map<String, BikeLocation> _allBikeLocations = {};
 29: 
 30:   // Speichert den Standort des aktuell gefundenen Fahrrads
 31:   BikeLocation? _foundBikeLocation;
 32: 
 33:   // Liste der Marker, die auf der Karte angezeigt werden sollen
 34:   List<Marker> _markers = [];
 35: 
 36:   // Standard-Mittelpunkt und Zoomlevel für die Karte (z.B. Köln-Zentrum)
 37:   static const LatLng _initialMapCenter = LatLng(50.9381, 6.95778);
 38:   static const double _initialMapZoom = 12.0;
 39: 
 40:   @override
 41:   void initState() {
 42:     super.initState();
 43:     // Beim Start der App alle Fahrradstandorte von der API laden
 44:     _loadAllBikeLocations();
 45:   }
 46: 
 47:   @override
 48:   void dispose() {
 49:     // Controller freigeben, um Speicherlecks zu vermeiden
 50:     _bikeIdController.dispose();
 51:     super.dispose();
 52:   }
 53: 
 54:   /// Lädt alle Fahrradstandorte von der Next-Bike API.
 55:   /// Setzt Ladezustände und behandelt Fehler.
 56:   Future<void> _loadAllBikeLocations() async {
 57:     setState(() {
 58:       _isLoading = true; // Ladezustand aktivieren
 59:       _errorMessage = null; // Vorherige Fehlermeldungen zurücksetzen
 60:     });
 61:     try {
 62:       final service = NextbikeApiService();
 63:       _allBikeLocations = await service.fetchBikeLocations();
 64:       print('Alle Standorte geladen: ${_allBikeLocations.length} Fahrräder');
 65:       // Nach erfolgreichem Laden, falls noch kein Fahrrad gesucht wurde,
 66:       // bleibt die Karte auf dem initialen Mittelpunkt.
 67:     } catch (e) {
 68:       setState(() {
 69:         _errorMessage = e.toString(); // Fehlermeldung speichern
 70:         print('Fehler beim Laden der Standorte: $_errorMessage');
 71:       });
 72:     } finally {
 73:       setState(() {
 74:         _isLoading = false; // Ladezustand deaktivieren
 75:       });
 76:     }
 77:   }
 78: 
 79:   /// Sucht nach einer Fahrrad-ID und aktualisiert die Karte und den UI-Status.
 80:   void _searchBike() {
 81:     final searchId = _bikeIdController.text.trim(); // Eingegebene ID bereinigen
 82:     setState(() {
 83:       _currentSearchBikeId = searchId;
 84:       _foundBikeLocation = null; // Vorheriges Ergebnis löschen
 85:       _markers = []; // Vorherige Marker von der Karte entfernen
 86:       _errorMessage = null; // Vorherige Fehlermeldung löschen
 87: 
 88:       if (searchId.isEmpty) {
 89:         _errorMessage = 'Bitte geben Sie eine Fahrrad-ID ein.';
 90:         return;
 91:       }
 92: 
 93:       // Prüfen, ob die eingegebene ID in unseren geladenen Daten vorhanden ist
 94:       if (_allBikeLocations.containsKey(searchId)) {
 95:         _foundBikeLocation =
 96:             _allBikeLocations[searchId]; // Gefundenen Standort speichern
 97: 
 98:         // Marker für das gefundene Fahrrad erstellen
 99:         _markers = [
100:           Marker(
101:             point: _foundBikeLocation!.position, // Position des Fahrrads
102:             width: 80.0,
103:             height: 80.0,
104:             child: const Icon(
105:               // Visuelle Darstellung des Markers (roter Push-Pin)
106:               Icons.location_on,
107:               color: Colors.red,
108:               size: 40.0,
109:             ),
110:           ),
111:         ];
112: 
113:         // Karte auf den gefundenen Punkt zentrieren und Zoom anpassen
114:         _mapController.move(
115:           _foundBikeLocation!.position,
116:           16.0,
117:         ); // Zoomstufe 16 für gute Detailansicht
118: 
119:         print(
120:           'Fahrrad $searchId gefunden: Lat ${_foundBikeLocation!.position.latitude}, Lng ${_foundBikeLocation!.position.longitude}',
121:         );
122:       } else {
123:         // Fahrrad-ID nicht gefunden
124:         _errorMessage = 'Fahrrad-ID "$searchId" nicht gefunden.';
125:         print('Fahrrad-ID "$searchId" nicht gefunden.');
126:       }
127:     });
128:   }
129: 
130:   @override
131:   Widget build(BuildContext context) {
132:     return Scaffold(
133:       appBar: AppBar(
134:         title: const Text('uNextBike'),
135:         backgroundColor: Colors.blueGrey,
136:         foregroundColor: Colors.white, // Textfarbe der AppBar
137:       ),
138:       body: Padding(
139:         padding: const EdgeInsets.all(16.0),
140:         child: Column(
141:           crossAxisAlignment: CrossAxisAlignment.stretch,
142:           children: [
143:             // Eingabefeld für die Fahrrad-ID
144:             TextField(
145:               controller: _bikeIdController,
146:               decoration: const InputDecoration(
147:                 labelText: 'Fahrrad-ID eingeben',
148:                 hintText: 'z.B. 222961',
149:                 border: OutlineInputBorder(),
150:                 prefixIcon: Icon(Icons.directions_bike),
151:               ),
152:               keyboardType:
153:                   TextInputType.number, // Nur numerische Eingabe erlauben
154:               onSubmitted: (_) =>
155:                   _searchBike(), // Suche auch bei Drücken der Enter-Taste auslösen
156:             ),
157:             const SizedBox(height: 16.0),
158:             // Suchbutton
159:             ElevatedButton.icon(
160:               // Button ist deaktiviert, solange Daten geladen werden
161:               onPressed: _isLoading && _allBikeLocations.isEmpty
162:                   ? null
163:                   : _searchBike,
164:               icon: _isLoading && _allBikeLocations.isEmpty
165:                   ? const SizedBox(
166:                       // Kleiner Ladeindikator im Button
167:                       width: 20,
168:                       height: 20,
169:                       child: CircularProgressIndicator(
170:                         strokeWidth: 2,
171:                         valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
172:                       ),
173:                     )
174:                   : const Icon(Icons.search), // Such-Icon
175:               label: Text(
176:                 _isLoading && _allBikeLocations.isEmpty
177:                     ? 'Lade Daten...'
178:                     : 'Fahrrad suchen',
179:               ),
180:               style: ElevatedButton.styleFrom(
181:                 padding: const EdgeInsets.symmetric(vertical: 12.0),
182:                 backgroundColor:
183:                     Colors.blueAccent, // Hintergrundfarbe des Buttons
184:                 foregroundColor: Colors.white, // Textfarbe des Buttons
185:                 textStyle: const TextStyle(fontSize: 18),
186:               ),
187:             ),
188:             const SizedBox(height: 24.0),
189: 
190:             // Bereich für Lade-, Fehler- und Ergebnis-Anzeige
191:             if (_isLoading && _allBikeLocations.isEmpty)
192:               const Center(
193:                 child: CircularProgressIndicator(),
194:               ) // Initialer Ladeindikator
195:             else if (_errorMessage != null &&
196:                 !_isLoading) // Fehlermeldung anzeigen, wenn ein Fehler auftrat und nicht mehr geladen wird
197:               Text(
198:                 _errorMessage!,
199:                 style: const TextStyle(color: Colors.red, fontSize: 16),
200:                 textAlign: TextAlign.center,
201:               )
202:             else if (_foundBikeLocation !=
203:                 null) // Details des gefundenen Fahrrads anzeigen
204:               Column(
205:                 children: [
206:                   const Text(
207:                     'Fahrrad gefunden!',
208:                     style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
209:                   ),
210:                   Text(
211:                     'ID: ${_foundBikeLocation!.bikeNumber}',
212:                     style: const TextStyle(fontSize: 16),
213:                   ),
214:                   Text(
215:                     'Position: Lat ${_foundBikeLocation!.position.latitude}, Lng ${_foundBikeLocation!.position.longitude}',
216:                     style: const TextStyle(fontSize: 16),
217:                   ),
218:                 ],
219:               )
220:             else if (_allBikeLocations.isNotEmpty &&
221:                 _currentSearchBikeId.isEmpty)
222:               // Aufforderung zur Eingabe, wenn Daten geladen sind und noch nicht gesucht wurde
223:               const Text(
224:                 'Geben Sie eine Fahrrad-ID ein, um den Standort auf der Karte zu finden.',
225:                 style: TextStyle(fontSize: 16),
226:                 textAlign: TextAlign.center,
227:               ),
228: 
229:             const SizedBox(height: 24.0),
230: 
231:             // OpenStreetMap Integration
232:             Expanded(
233:               child: Card(
234:                 elevation: 4,
235:                 clipBehavior: Clip
236:                     .antiAlias, // Sorgt für abgerundete Ecken der Karte passend zur Card
237:                 child: _isLoading && _allBikeLocations.isEmpty
238:                     ? const Center(
239:                         child: CircularProgressIndicator(),
240:                       ) // Ladeindikator für die Karte, falls Daten noch nicht da sind
241:                     : _errorMessage != null && !_isLoading
242:                     ? Center(
243:                         // Fehleranzeige, falls Karten- oder API-Laden fehlschlägt
244:                         child: Padding(
245:                           padding: const EdgeInsets.all(8.0),
246:                           child: Text(
247:                             'Konnte Karte nicht laden aufgrund eines Fehlers: $_errorMessage',
248:                             style: const TextStyle(
249:                               color: Colors.red,
250:                               fontSize: 16,
251:                             ),
252:                             textAlign: TextAlign.center,
253:                           ),
254:                         ),
255:                       )
256:                     : FlutterMap(
257:                         // Das eigentliche Karten-Widget
258:                         mapController:
259:                             _mapController, // Zuweisung des Controllers zur Steuerung
260:                         options: MapOptions(
261:                           initialCenter:
262:                               _initialMapCenter, // Startmittelpunkt der Karte
263:                           initialZoom: _initialMapZoom, // Startzoomstufe
264:                           interactionOptions: const InteractionOptions(
265:                             // Deaktiviert die Rotation, erlaubt alle anderen Interaktionen
266:                             flags:
267:                                 InteractiveFlag.all & ~InteractiveFlag.rotate,
268:                           ),
269:                         ),
270:                         children: [
271:                           // TileLayer für die OpenStreetMap-Kacheln
272:                           TileLayer(
273:                             urlTemplate:
274:                                 "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
275:                             // WICHTIG: Ersetzen Sie 'de.yourcompany.unextbike' durch einen eindeutigen Paketnamen Ihrer App!
276:                             userAgentPackageName: 'de.yourcompany.unextbike',
277:                           ),
278:                           // MarkerLayer zur Anzeige der Push-Pins
279:                           MarkerLayer(
280:                             markers:
281:                                 _markers, // Die Liste der anzuzeigenden Marker
282:                           ),
283:                         ],
284:                       ),
285:               ),
286:             ),
287:           ],
288:         ),
289:       ),
290:     );
291:   }
292: }
293: 

// ==== lib\services\nextbike_api_service.dart ====

 1: // lib/services/nextbike_api_service.dart
 2: 
 3: import 'package:http/http.dart' as http;
 4: import 'package:xml/xml.dart';
 5: import 'package:latlong2/latlong.dart';
 6: import '../models/bike_location.dart'; // Import des neuen Modells
 7: 
 8: /// Ein Service zum Abrufen und Parsen von Next-Bike-Daten.
 9: class NextbikeApiService {
10:   final String _apiUrl =
11:       'https://api.nextbike.net/maps/nextbike-live.xml?city=14';
12: 
13:   /// Ruft die Next-Bike-Daten ab und gibt eine Map von Fahrrad-IDs zu BikeLocation-Objekten zurück.
14:   Future<Map<String, BikeLocation>> fetchBikeLocations() async {
15:     try {
16:       final response = await http.get(Uri.parse(_apiUrl));
17: 
18:       if (response.statusCode == 200) {
19:         // Erfolgreiche Antwort, jetzt XML parsen
20:         return _parseXmlResponse(response.body);
21:       } else {
22:         // Fehler bei der API-Anfrage
23:         throw Exception(
24:           'Fehler beim Laden der Next-Bike Daten: ${response.statusCode}',
25:         );
26:       }
27:     } catch (e) {
28:       // Allgemeine Netzwerk- oder andere Fehler abfangen
29:       throw Exception('Netzwerk- oder Parsing-Fehler: $e');
30:     }
31:   }
32: 
33:   /// Parst den XML-String und extrahiert die Fahrradstandorte.
34:   Map<String, BikeLocation> _parseXmlResponse(String xmlString) {
35:     final document = XmlDocument.parse(xmlString);
36:     final Map<String, BikeLocation> bikeLocations = {};
37: 
38:     // Finden des 'city'-Elements
39:     final cityElement = document.findAllElements('city').firstOrNull;
40: 
41:     if (cityElement != null) {
42:       // Iterieren über alle 'place'-Elemente innerhalb des 'city'-Elements
43:       for (final placeElement in cityElement.findAllElements('place')) {
44:         final latString = placeElement.getAttribute('lat');
45:         final lngString = placeElement.getAttribute('lng');
46: 
47:         if (latString != null && lngString != null) {
48:           try {
49:             final lat = double.parse(latString);
50:             final lng = double.parse(lngString);
51:             final placeLatLng = LatLng(lat, lng);
52: 
53:             // Jetzt die 'bike'-Elemente innerhalb dieses 'place' finden
54:             for (final bikeElement in placeElement.findAllElements('bike')) {
55:               final bikeNumber = bikeElement.getAttribute('number');
56:               if (bikeNumber != null && bikeNumber.isNotEmpty) {
57:                 bikeLocations[bikeNumber] = BikeLocation(
58:                   bikeNumber: bikeNumber,
59:                   position: placeLatLng,
60:                 );
61:               }
62:             }
63:           } catch (e) {
64:             print(
65:               'Fehler beim Parsen der Koordinaten oder Bike-ID für ein Place: $e',
66:             );
67:           }
68:         }
69:       }
70:     }
71:     return bikeLocations;
72:   }
73: }
74: 

// ==== lib\widgets\bike_map.dart ====

1: 

// ==== lib\widgets\custom_marker_icon.dart ====

1: 

// ==== lib\main.dart ====

 1: // lib/main.dart
 2: 
 3: import 'package:flutter/material.dart';
 4: import 'screens/main_screen.dart'; // Korrigierter relativer Importpfad
 5: 
 6: void main() {
 7:   runApp(const MyApp());
 8: }
 9: 
10: class MyApp extends StatelessWidget {
11:   const MyApp({super.key});
12: 
13:   @override
14:   Widget build(BuildContext context) {
15:     return MaterialApp(
16:       debugShowCheckedModeBanner: false,
17:       title: 'uNextBike',
18:       home: const MainScreen(),
19:     );
20:   }
21: }
22: 
