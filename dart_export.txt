Verzeichnisstruktur des lib-Ordners:

└── generated/
└── models/
    └── bike_location.dart
└── screens/
    └── main_screen.dart
└── services/
    └── nextbike_api_service.dart
└── widgets/
    ├── bike_map.dart
    └── custom_marker_icon.dart
└── main.dart


================================================================================

Dateiinhalte:

// ==== lib\models\bike_location.dart ====

// lib/models/bike_location.dart

import 'package:latlong2/latlong.dart';

/// Repräsentiert den Standort eines Fahrrads mit seiner ID, Breiten- und Längengrad.
class BikeLocation {
  final String bikeNumber;
  final LatLng position;

  BikeLocation({required this.bikeNumber, required this.position});

  @override
  String toString() {
    return 'BikeLocation(bikeNumber: $bikeNumber, position: ${position.latitude}, ${position.longitude})';
  }
}


// ==== lib\screens\main_screen.dart ====

// lib/screens/main_screen.dart

import 'package:flutter/material.dart';
import 'package:latlong2/latlong.dart';
import 'package:flutter_map/flutter_map.dart';

import '../services/nextbike_api_service.dart';
import '../models/bike_location.dart';
import '../widgets/bike_map.dart'; // Import des neuen BikeMap-Widgets
import '../widgets/custom_marker_icon.dart'; // Import des neuen CustomMarkerIcon-Widgets

class MainScreen extends StatefulWidget {
  const MainScreen({super.key});

  @override
  State<MainScreen> createState() => _MainScreenState();
}

class _MainScreenState extends State<MainScreen> {
  final TextEditingController _bikeIdController = TextEditingController();
  final MapController _mapController = MapController();

  String _currentSearchBikeId = '';
  bool _isLoading = false;
  String? _errorMessage;

  Map<String, BikeLocation> _allBikeLocations = {};
  BikeLocation? _foundBikeLocation;
  List<Marker> _markers = [];

  static const LatLng _initialMapCenter = LatLng(50.9381, 6.95778);
  static const double _initialMapZoom = 12.0;

  @override
  void initState() {
    super.initState();
    _loadAllBikeLocations();
  }

  @override
  void dispose() {
    _bikeIdController.dispose();
    super.dispose();
  }

  Future<void> _loadAllBikeLocations() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });
    try {
      final service = NextbikeApiService();
      _allBikeLocations = await service.fetchBikeLocations();
    } catch (e) {
      setState(() {
        _errorMessage = e.toString();
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _searchBike() {
    final searchId = _bikeIdController.text.trim();
    setState(() {
      _currentSearchBikeId = searchId;
      _foundBikeLocation = null;
      _markers = [];
      _errorMessage = null;

      if (searchId.isEmpty) {
        _errorMessage = 'Bitte geben Sie eine Fahrrad-ID ein.';
        return;
      }

      if (_allBikeLocations.containsKey(searchId)) {
        _foundBikeLocation = _allBikeLocations[searchId];

        _markers = [
          Marker(
            point: _foundBikeLocation!.position,
            width: 80.0,
            height: 80.0,
            child:
                const CustomMarkerIcon(), // Verwendung des ausgelagerten Widgets
          ),
        ];

        _mapController.move(_foundBikeLocation!.position, 16.0);
      } else {
        _errorMessage = 'Fahrrad-ID "$searchId" nicht gefunden.';
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('uNextBike'),
        backgroundColor: Colors.blueGrey,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            TextField(
              controller: _bikeIdController,
              decoration: const InputDecoration(
                labelText: 'Fahrrad-ID eingeben',
                hintText: 'z.B. 221785',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.directions_bike),
              ),
              keyboardType: TextInputType.number,
              onSubmitted: (_) => _searchBike(),
            ),
            const SizedBox(height: 16.0),
            ElevatedButton.icon(
              onPressed: _isLoading && _allBikeLocations.isEmpty
                  ? null
                  : _searchBike,
              icon: _isLoading && _allBikeLocations.isEmpty
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  : const Icon(Icons.search),
              label: Text(
                _isLoading && _allBikeLocations.isEmpty
                    ? 'Lade Daten...'
                    : 'Fahrrad suchen',
              ),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 12.0),
                backgroundColor: Colors.blueAccent,
                foregroundColor: Colors.white,
                textStyle: const TextStyle(fontSize: 18),
              ),
            ),
            const SizedBox(height: 24.0),
            if (_isLoading && _allBikeLocations.isEmpty)
              const Center(child: CircularProgressIndicator())
            else if (_errorMessage != null && !_isLoading)
              Text(
                _errorMessage!,
                style: const TextStyle(color: Colors.red, fontSize: 16),
                textAlign: TextAlign.center,
              )
            else if (_foundBikeLocation != null)
              Column(
                children: [
                  const Text(
                    'Fahrrad gefunden!',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  Text(
                    'ID: ${_foundBikeLocation!.bikeNumber}',
                    style: const TextStyle(fontSize: 16),
                  ),
                  Text(
                    'Position: Lat ${_foundBikeLocation!.position.latitude}, Lng ${_foundBikeLocation!.position.longitude}',
                    style: const TextStyle(fontSize: 16),
                  ),
                ],
              )
            else if (_allBikeLocations.isNotEmpty &&
                _currentSearchBikeId.isEmpty)
              const Text(
                'Geben Sie eine Fahrrad-ID ein, um den Standort auf der Karte zu finden.',
                style: TextStyle(fontSize: 16),
                textAlign: TextAlign.center,
              ),
            const SizedBox(height: 24.0),

            // OpenStreetMap Integration mit dem neuen BikeMap-Widget
            Expanded(
              child: Card(
                elevation: 4,
                clipBehavior: Clip.antiAlias,
                child: BikeMap(
                  mapController: _mapController,
                  initialMapCenter: _initialMapCenter,
                  initialMapZoom: _initialMapZoom,
                  markers: _markers,
                  // Parameter für den Ladezustand und Fehlermeldungen werden an BikeMap übergeben
                  isLoading: _isLoading && _allBikeLocations.isEmpty,
                  errorMessage: _errorMessage,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


// ==== lib\services\nextbike_api_service.dart ====

// lib/services/nextbike_api_service.dart

import 'package:http/http.dart' as http;
import 'package:xml/xml.dart';
import 'package:latlong2/latlong.dart';
import '../models/bike_location.dart'; // Import des neuen Modells

/// Ein Service zum Abrufen und Parsen von Next-Bike-Daten.
class NextbikeApiService {
  final String _apiUrl =
      'https://api.nextbike.net/maps/nextbike-live.xml?city=14';

  /// Ruft die Next-Bike-Daten ab und gibt eine Map von Fahrrad-IDs zu BikeLocation-Objekten zurück.
  Future<Map<String, BikeLocation>> fetchBikeLocations() async {
    try {
      final response = await http.get(Uri.parse(_apiUrl));

      if (response.statusCode == 200) {
        // Erfolgreiche Antwort, jetzt XML parsen
        return _parseXmlResponse(response.body);
      } else {
        // Fehler bei der API-Anfrage
        throw Exception(
          'Fehler beim Laden der Next-Bike Daten: ${response.statusCode}',
        );
      }
    } catch (e) {
      // Allgemeine Netzwerk- oder andere Fehler abfangen
      throw Exception('Netzwerk- oder Parsing-Fehler: $e');
    }
  }

  /// Parst den XML-String und extrahiert die Fahrradstandorte.
  Map<String, BikeLocation> _parseXmlResponse(String xmlString) {
    final document = XmlDocument.parse(xmlString);
    final Map<String, BikeLocation> bikeLocations = {};

    // Finden des 'city'-Elements
    final cityElement = document.findAllElements('city').firstOrNull;

    if (cityElement != null) {
      // Iterieren über alle 'place'-Elemente innerhalb des 'city'-Elements
      for (final placeElement in cityElement.findAllElements('place')) {
        final latString = placeElement.getAttribute('lat');
        final lngString = placeElement.getAttribute('lng');

        if (latString != null && lngString != null) {
          try {
            final lat = double.parse(latString);
            final lng = double.parse(lngString);
            final placeLatLng = LatLng(lat, lng);

            // Jetzt die 'bike'-Elemente innerhalb dieses 'place' finden
            for (final bikeElement in placeElement.findAllElements('bike')) {
              final bikeNumber = bikeElement.getAttribute('number');
              if (bikeNumber != null && bikeNumber.isNotEmpty) {
                bikeLocations[bikeNumber] = BikeLocation(
                  bikeNumber: bikeNumber,
                  position: placeLatLng,
                );
              }
            }
          } catch (e) {
            // print(
            //   'Fehler beim Parsen der Koordinaten oder Bike-ID für ein Place: $e',
            // );
          }
        }
      }
    }
    return bikeLocations;
  }
}


// ==== lib\widgets\bike_map.dart ====

// lib/widgets/bike_map.dart

import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';

/// Ein Widget, das die OpenStreetMap mit Markern anzeigt.
/// Es kann auch Ladezustände oder Fehlermeldungen anzeigen.
class BikeMap extends StatelessWidget {
  final MapController mapController;
  final LatLng initialMapCenter;
  final double initialMapZoom;
  final List<Marker> markers;
  final bool
  isLoading; // Zeigt an, ob die initialen Daten für die Karte geladen werden
  final String?
  errorMessage; // Eine Fehlermeldung, die statt der Karte angezeigt werden soll

  const BikeMap({
    super.key,
    required this.mapController,
    required this.initialMapCenter,
    required this.initialMapZoom,
    required this.markers,
    this.isLoading = false,
    this.errorMessage,
  });

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      // Zeigt einen Ladeindikator, wenn die Karte noch initial geladen wird.
      return const Center(child: CircularProgressIndicator());
    } else if (errorMessage != null) {
      // Zeigt eine Fehlermeldung an, wenn ein Fehler beim Laden der Kartendaten auftrat.
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Text(
            'Konnte Karte nicht laden aufgrund eines Fehlers: $errorMessage',
            style: const TextStyle(color: Colors.red, fontSize: 16),
            textAlign: TextAlign.center,
          ),
        ),
      );
    } else {
      // Zeigt die FlutterMap an, wenn keine Fehler oder Ladezustände vorliegen.
      return FlutterMap(
        mapController: mapController,
        options: MapOptions(
          initialCenter: initialMapCenter,
          initialZoom: initialMapZoom,
          interactionOptions: const InteractionOptions(
            flags: InteractiveFlag.all & ~InteractiveFlag.rotate,
          ),
        ),
        children: [
          TileLayer(
            urlTemplate: "https://tile.openstreetmap.org/{z}/{x}/{y}.png",
            userAgentPackageName: 'de.yourcompany.unextbike',
          ),
          MarkerLayer(markers: markers),
        ],
      );
    }
  }
}


// ==== lib\widgets\custom_marker_icon.dart ====

// lib/widgets/custom_marker_icon.dart

import 'package:flutter/material.dart';

/// Ein benutzerdefiniertes Widget, das als Marker-Icon auf der Karte dient.
class CustomMarkerIcon extends StatelessWidget {
  const CustomMarkerIcon({super.key});

  @override
  Widget build(BuildContext context) {
    return const Icon(Icons.location_on, color: Colors.red, size: 40.0);
  }
}


// ==== lib\main.dart ====

// lib/main.dart

import 'package:flutter/material.dart';
import 'screens/main_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'uNextBike',
      home: const MainScreen(),
    );
  }
}

